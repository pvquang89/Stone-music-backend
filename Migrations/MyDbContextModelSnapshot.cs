// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using stone_music_backend.Data;

#nullable disable

namespace stone_music_backend.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("stone_music_backend.Data.Album", b =>
                {
                    b.Property<string>("sAlbumId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("sAlbumGenreId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sAlbumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("sDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("sAlbumId")
                        .HasName("PK_Album_sAlbumId");

                    b.HasIndex("sAlbumGenreId");

                    b.HasIndex("sUserId");

                    b.ToTable("Album", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.AlbumGenre", b =>
                {
                    b.Property<string>("sAlbumGenreId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sAlbumGenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("sAlbumGenreId")
                        .HasName("PK_AlbumGenre_sAlbumGenreId");

                    b.HasIndex("sAlbumGenreName")
                        .IsUnique();

                    b.ToTable("AlbumGenre", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.Comment", b =>
                {
                    b.Property<string>("sCommentId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("sContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("sTrackId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("sCommentId")
                        .HasName("PK_Comment");

                    b.HasIndex("sTrackId");

                    b.HasIndex("sUserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.Follow", b =>
                {
                    b.Property<string>("sUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sTrackedPersonId")
                        .HasColumnType("varchar(50)");

                    b.HasKey("sUserId", "sTrackedPersonId")
                        .HasName("PK_Follow");

                    b.HasIndex("sTrackedPersonId");

                    b.ToTable("Follow", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.History", b =>
                {
                    b.Property<string>("sHistoryId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("sTrackId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("sHistoryId")
                        .HasName("PK_History_sHistoryId");

                    b.HasIndex("sTrackId");

                    b.HasIndex("sUserId");

                    b.ToTable("History", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.Like", b =>
                {
                    b.Property<string>("sUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sTrackId")
                        .HasColumnType("varchar(50)");

                    b.HasKey("sUserId", "sTrackId")
                        .HasName("PK_Like");

                    b.HasIndex("sTrackId");

                    b.ToTable("Like", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.Playlist", b =>
                {
                    b.Property<string>("sPlaylistId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("bIsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("sDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sPlaylistGenreId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sPlaylistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("sUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("sPlaylistId")
                        .HasName("PK_Playlist_sPlaylistId");

                    b.HasIndex("sPlaylistGenreId");

                    b.HasIndex("sUserId");

                    b.ToTable("Playlist", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.PlaylistGenre", b =>
                {
                    b.Property<string>("sPlaylistGenreId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sPlaylistGenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("sPlaylistGenreId")
                        .HasName("PK_PlayListGenre_sPlaylistGenreId");

                    b.HasIndex("sPlaylistGenreName")
                        .IsUnique();

                    b.ToTable("PlayListGerne", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.Playlist_Track", b =>
                {
                    b.Property<string>("PlayListId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TrackId")
                        .HasColumnType("varchar(50)");

                    b.HasKey("PlayListId", "TrackId")
                        .HasName("PK_Playlist_Track");

                    b.HasIndex("TrackId");

                    b.ToTable("Playlist_Track", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.Track", b =>
                {
                    b.Property<string>("sTrackId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("bIsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("sAlbumId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sHashtag")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("sSource")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("sThumbnail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("sTrackGenreId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sTrackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("sUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("sTrackId")
                        .HasName("PK_Track_sTrackId");

                    b.HasIndex("sAlbumId");

                    b.HasIndex("sTrackGenreId");

                    b.HasIndex("sUserId");

                    b.ToTable("Track", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.TrackGenre", b =>
                {
                    b.Property<string>("sTrackGenreId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sTrackGenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("sTrackGenreId")
                        .HasName("PK_TrackGenre");

                    b.HasIndex("sTrackGenreName")
                        .IsUnique();

                    b.ToTable("TrackGenre", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.User", b =>
                {
                    b.Property<string>("sUserId")
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("sAccount")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(6);

                    b.Property<string>("sAvatar")
                        .HasColumnType("varchar(30)")
                        .HasColumnOrder(4);

                    b.Property<string>("sBio")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(5);

                    b.Property<string>("sEmail")
                        .HasColumnType("varchar(30)")
                        .HasColumnOrder(3);

                    b.Property<string>("sFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<string>("sLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("sPassword")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnOrder(7);

                    b.HasKey("sUserId")
                        .HasName("PK_User_sUserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("stone_music_backend.Data.Album", b =>
                {
                    b.HasOne("stone_music_backend.Data.AlbumGenre", "AlbumGenre")
                        .WithMany("Albums")
                        .HasForeignKey("sAlbumGenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Album_AlbumGenre_sAlbumGenreId");

                    b.HasOne("stone_music_backend.Data.User", "User")
                        .WithMany("Albums")
                        .HasForeignKey("sUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Album_User_sUserId");

                    b.Navigation("AlbumGenre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stone_music_backend.Data.Comment", b =>
                {
                    b.HasOne("stone_music_backend.Data.Track", "Track")
                        .WithMany("Comments")
                        .HasForeignKey("sTrackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Track_sTrackId");

                    b.HasOne("stone_music_backend.Data.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("sUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_User_sUserId");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stone_music_backend.Data.Follow", b =>
                {
                    b.HasOne("stone_music_backend.Data.User", "TrackedPerson")
                        .WithMany("Followers")
                        .HasForeignKey("sTrackedPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Follow_User_sTrackedPersonId");

                    b.HasOne("stone_music_backend.Data.User", "Follower")
                        .WithMany("TrackedPersons")
                        .HasForeignKey("sUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Follow_User_sUserId");

                    b.Navigation("Follower");

                    b.Navigation("TrackedPerson");
                });

            modelBuilder.Entity("stone_music_backend.Data.History", b =>
                {
                    b.HasOne("stone_music_backend.Data.Track", "Track")
                        .WithMany("Histories")
                        .HasForeignKey("sTrackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_History_Track_sTrackId");

                    b.HasOne("stone_music_backend.Data.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("sUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_History_User_sUserId");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stone_music_backend.Data.Like", b =>
                {
                    b.HasOne("stone_music_backend.Data.Track", "Track")
                        .WithMany("Likes")
                        .HasForeignKey("sTrackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Like_Track_sTrackId");

                    b.HasOne("stone_music_backend.Data.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("sUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Like_User_sUserId");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stone_music_backend.Data.Playlist", b =>
                {
                    b.HasOne("stone_music_backend.Data.PlaylistGenre", "PlaylistGenre")
                        .WithMany("Playlists")
                        .HasForeignKey("sPlaylistGenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Playlist_PlaylistGenre_sPlaylistGenreId");

                    b.HasOne("stone_music_backend.Data.User", "User")
                        .WithMany("PlayLists")
                        .HasForeignKey("sUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Playlist_User_sUserId");

                    b.Navigation("PlaylistGenre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stone_music_backend.Data.Playlist_Track", b =>
                {
                    b.HasOne("stone_music_backend.Data.Playlist", "PlayList")
                        .WithMany("Playlist_Tracks")
                        .HasForeignKey("PlayListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PlaylistTrack_Playlist_PlaylistId");

                    b.HasOne("stone_music_backend.Data.Track", "Track")
                        .WithMany("Playlist_Tracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PlaylistTrack_Track_TrackId");

                    b.Navigation("PlayList");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("stone_music_backend.Data.Track", b =>
                {
                    b.HasOne("stone_music_backend.Data.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("sAlbumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Track_Album_sAlbumId");

                    b.HasOne("stone_music_backend.Data.TrackGenre", "TrackGenre")
                        .WithMany("Tracks")
                        .HasForeignKey("sTrackGenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Track_TrackGenre_sTrackGenreId");

                    b.HasOne("stone_music_backend.Data.User", "User")
                        .WithMany("Tracks")
                        .HasForeignKey("sUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Track_User_sUserId");

                    b.Navigation("Album");

                    b.Navigation("TrackGenre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stone_music_backend.Data.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("stone_music_backend.Data.AlbumGenre", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("stone_music_backend.Data.Playlist", b =>
                {
                    b.Navigation("Playlist_Tracks");
                });

            modelBuilder.Entity("stone_music_backend.Data.PlaylistGenre", b =>
                {
                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("stone_music_backend.Data.Track", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Histories");

                    b.Navigation("Likes");

                    b.Navigation("Playlist_Tracks");
                });

            modelBuilder.Entity("stone_music_backend.Data.TrackGenre", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("stone_music_backend.Data.User", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Histories");

                    b.Navigation("Likes");

                    b.Navigation("PlayLists");

                    b.Navigation("TrackedPersons");

                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
